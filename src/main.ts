import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ConfigService } from '@nestjs/config';
import { LoggingInterceptor } from './common/interceptors/logging.interceptor';
import { ValidationPipe, INestApplication } from '@nestjs/common';
import { HttpErrorFilter } from './common/filters/http-error.filter';
import { logger } from './common/logger';

// Swagger
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';

logger.info('üöÄ Server startup ‚Äî Observability enabled');

async function bootstrap() {
    const app: INestApplication = await NestFactory.create(AppModule, {
        logger: false, // –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Nest-–ª–æ–≥–≥–µ—Ä
    });

    logger.info('üöÄ Initializing application');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Swagger
    const swaggerConfig = new DocumentBuilder()
        .setTitle('NestJS Prototype API')
        .setDescription('CRUD endpoints with Observability & Docker setup')
        .setVersion('1.0')
        .build();
    const swaggerDoc = SwaggerModule.createDocument(app, swaggerConfig);
    SwaggerModule.setup('api', app, swaggerDoc);
    logger.info('üìö Swagger UI available at /api');

    // –ü–æ–ª—É—á–∞–µ–º ConfigService –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const configService = app.get(ConfigService);
    const port = configService.get<number>('PORT') || 3750;

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∏, –ø–∞–π–ø—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã
    app.useGlobalInterceptors(new LoggingInterceptor());
    app.useGlobalPipes(
        new ValidationPipe({
            whitelist: true,            // —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø–æ–ª—è
            forbidNonWhitelisted: true, // –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π
            transform: true,            // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–∏–ø—ã DTO
        }),
    );
    app.useGlobalFilters(new HttpErrorFilter());

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
    await app.listen(port, '0.0.0.0');
    logger.info(`‚úÖ Application is running on http://localhost:${port}`);
    logger.info(`üìä Metrics available at http://localhost:${port}/metrics`);
}

bootstrap();
